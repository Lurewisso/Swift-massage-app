
import UIKit
import Foundation


class AuthorViewController: UIViewController {
    
    let backgroundAuthorFormImageView = UIImageView()
    let infoView = UIView()
    let infoLabel = UILabel()
    let closeButton = UIButton()
    let button = UIButton()
    let button2 = UIButton()
    let button3 = UIButton()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
//        setupUI()
        let isDarkMode = UserDefaults.standard.bool(forKey: "isDarkMode")
                updateAppBackground(isDarkMode: isDarkMode)
        
//        backgroundAuthorFormImageView.image = UIImage(named: "wallpaperBlack")
        backgroundAuthorFormImageView.contentMode = .scaleAspectFill
        backgroundAuthorFormImageView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(backgroundAuthorFormImageView)
        
//        let button = UIButton()
//        let button2 = UIButton()
//        let button3 = UIButton()
        
        setupButton(button, title: "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å")
        setupButton(button2, title: "–ö—É—Ä—Å –Ø–±–ª–æ–∫–æ")
        setupButton(button3, title: "–ö—É—Ä—Å –ì—Ä—É—à–∞")
        
        button.addTarget(self, action: #selector(showCourses(_:)), for: .touchUpInside)
        button2.addTarget(self, action: #selector(showCourses(_:)), for: .touchUpInside)
        button3.addTarget(self, action: #selector(showCourses(_:)), for: .touchUpInside)
        
        view.addSubview(button)
        view.addSubview(button2)
        view.addSubview(button3)
        
        setupInfoView()
        
        NSLayoutConstraint.activate([
            backgroundAuthorFormImageView.topAnchor.constraint(equalTo: view.topAnchor),
            backgroundAuthorFormImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            backgroundAuthorFormImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            backgroundAuthorFormImageView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            button.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 260),
            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button.widthAnchor.constraint(equalToConstant: 200),
            button.heightAnchor.constraint(equalToConstant: 50),
            
            button2.topAnchor.constraint(equalTo: button.bottomAnchor, constant: 20),
            button2.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button2.widthAnchor.constraint(equalToConstant: 200),
            button2.heightAnchor.constraint(equalToConstant: 50),
            
            button3.topAnchor.constraint(equalTo: button2.bottomAnchor, constant: 20),
            button3.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button3.widthAnchor.constraint(equalToConstant: 200),
            button3.heightAnchor.constraint(equalToConstant: 50),
            
            infoView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            infoView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            infoView.topAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    func setupButton(_ button: UIButton, title: String) {
        button.setTitle(title, for: .normal)
        button.setTitle("Loading", for: .selected)
        button.setTitleColor(.white, for: .normal)
//        button.backgroundColor = .red
        button.layer.cornerRadius = 10
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOpacity = 0.5
        button.layer.shadowOffset = CGSize(width: 5, height: 5)
        button.layer.shadowRadius = 5
        button.translatesAutoresizingMaskIntoConstraints = false
    }
    
    func setupInfoView() {
        infoView.backgroundColor = .white
        infoView.layer.cornerRadius = 10
        infoView.layer.shadowColor = UIColor.black.cgColor
        infoView.layer.shadowOpacity = 0.5
        infoView.layer.shadowOffset = CGSize(width: 5, height: 5)
        infoView.layer.shadowRadius = 5
        infoView.translatesAutoresizingMaskIntoConstraints = false
        infoView.isHidden = true
        
        infoLabel.text = ""
        infoLabel.textColor = .black
        infoLabel.numberOfLines = 0
        infoLabel.translatesAutoresizingMaskIntoConstraints = false
        
        infoView.addSubview(infoLabel)
        view.addSubview(infoView)
        
        closeButton.setTitle("–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", for: .normal)
        closeButton.setTitleColor(.white, for: .normal)
//        closeButton.backgroundColor = .red
        closeButton.layer.cornerRadius = 10
        closeButton.layer.shadowColor = UIColor.black.cgColor
        closeButton.layer.shadowOpacity = 0.5
        closeButton.layer.shadowOffset = CGSize(width: 6, height: 5)
        closeButton.layer.shadowRadius = 5
        closeButton.translatesAutoresizingMaskIntoConstraints = false
        closeButton.addTarget(self, action: #selector(closeInfoView), for: .touchUpInside)
        
        infoView.addSubview(closeButton)
        
        NSLayoutConstraint.activate([
            infoLabel.topAnchor.constraint(equalTo: infoView.topAnchor, constant: 20),
            infoLabel.leadingAnchor.constraint(equalTo: infoView.leadingAnchor, constant: 20),
            infoLabel.trailingAnchor.constraint(equalTo: infoView.trailingAnchor, constant: -20),
            
            closeButton.topAnchor.constraint(equalTo: infoLabel.bottomAnchor, constant: 20),
            closeButton.centerXAnchor.constraint(equalTo: infoView.centerXAnchor),
            closeButton.bottomAnchor.constraint(equalTo: infoView.bottomAnchor, constant: -20),
            closeButton.widthAnchor.constraint(equalToConstant: 200),
            closeButton.heightAnchor.constraint(equalToConstant: 50),
            
            infoView.bottomAnchor.constraint(equalTo: closeButton.bottomAnchor, constant: 20) // Dynamic height constraint
        ])
    }
    func updateAppBackground(isDarkMode: Bool) {
            view.backgroundColor = isDarkMode ? .black : .systemGray2
            button.backgroundColor = isDarkMode ? .systemRed : .systemBlue
            button2.backgroundColor = isDarkMode ? .systemRed : .systemBlue
            button3.backgroundColor = isDarkMode ? .systemRed : .systemBlue
            closeButton.backgroundColor = isDarkMode ? .systemRed : .systemBlue
        }
    
    @objc func showCourses(_ sender: UIButton) {
        var infoText = ""
        switch sender.currentTitle {
        case "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å":
            infoText = """
            –ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 —Å–µ–∞–Ω—Å–æ–≤.
            ‚ñ™Ô∏è–í –æ–¥–∏–Ω —Å–µ–∞–Ω—Å –≤—Ö–æ–¥–∏—Ç –æ—Ç 2-—Ö –¥–æ 4-—Ö —Ç–µ—Ö–Ω–∏–∫, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
            ‚ñ™Ô∏è–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 40 –¥–æ 120 –º–∏–Ω—É—Ç.
            ‚ñ™Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–æ–≤: 1 - 2  —Å–µ–∞–Ω—Å–∞ –≤ –Ω–µ–¥–µ–ª—é.
            ‚ñ™Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–æ–≤: –≤–æ–∑–º–æ–∂–Ω–µ–Ω 1 —Å–µ–∞–Ω—Å –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ (–º–∞—Å—Ç–µ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–º–∞).
            ‚ñ™Ô∏è–ü—Ä–∏ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ - –æ—Ç–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ–∞–Ω—Å–∞.
            ‚ñ™Ô∏è–ü—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö (–ª–∏–±–æ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏) - –æ—Ç–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ–∞–Ω—Å–∞.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Ç—Ä–∏ –ø–ª–∞—Ç–µ–∂–∞.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ - 30.000‚ÇΩ.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ - 3.000‚ÇΩ.
            """
        case "–ö—É—Ä—Å –Ø–±–ª–æ–∫–æ":
            infoText = """
            üçé–ö—É—Ä—Å –Ø–±–ª–æ–∫–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 —Å–µ–∞–Ω—Å–æ–≤.
            ‚ñ™Ô∏è–í –æ–¥–∏–Ω —Å–µ–∞–Ω—Å –≤—Ö–æ–¥–∏—Ç –æ—Ç 2-—Ö –¥–æ 5-—Ç–∏ —Ç–µ—Ö–Ω–∏–∫, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
            ‚ñ™Ô∏è–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 60 –¥–æ 120 –º–∏–Ω—É—Ç.
            ‚ñ™Ô∏è–ó–æ–Ω—ã —Ä–∞–±–æ—Ç—ã: –ñ–∏–≤–æ—Ç, –±–æ–∫–∞, —Å–ø–∏–Ω–∞, —Ö–æ–ª–∫–∞.
            ‚ñ™Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–æ–≤: 1 - 2  —Å–µ–∞–Ω—Å–∞ –≤ –Ω–µ–¥–µ–ª—é.
            ‚ñ™Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–æ–≤: –≤–æ–∑–º–æ–∂–Ω–µ–Ω 1 —Å–µ–∞–Ω—Å –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ (–º–∞—Å—Ç–µ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–º–∞).
            ‚ñ™Ô∏è–ü—Ä–∏ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ - –æ—Ç–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ–∞–Ω—Å–∞.
            ‚ñ™Ô∏è–ü—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö (–ª–∏–±–æ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏) - –æ—Ç–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ–∞–Ω—Å–∞.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–∞ –ø–ª–∞—Ç–µ–∂–∞, –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–µ–∞–Ω—Å–µ - –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç—ë–∂, –Ω–∞ —à–µ—Å—Ç–æ–º —Å–µ–∞–Ω—Å–µ - –≤—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ - 25.000‚ÇΩ.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ - 2.500‚ÇΩ.
            """
        case "–ö—É—Ä—Å –ì—Ä—É—à–∞":
            infoText = """
            üçê–ö—É—Ä—Å –ì—Ä—É—à–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 —Å–µ–∞–Ω—Å–æ–≤.
            ‚ñ™Ô∏è–í –æ–¥–∏–Ω —Å–µ–∞–Ω—Å –≤—Ö–æ–¥–∏—Ç –æ—Ç 2-—Ö –¥–æ 5-—Ç–∏ —Ç–µ—Ö–Ω–∏–∫, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
            ‚ñ™Ô∏è–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 40 –¥–æ 120 –º–∏–Ω—É—Ç.
            ‚ñ™Ô∏è–ó–æ–Ω—ã —Ä–∞–±–æ—Ç—ã: –Ø–≥–æ–¥–∏—Ü—ã, –≤—Å–µ –∑–æ–Ω—ã –±—ë–¥–µ—Ä.
            ‚ñ™Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–æ–≤: 1 - 2  —Å–µ–∞–Ω—Å–∞ –≤ –Ω–µ–¥–µ–ª—é.
            ‚ñ™Ô∏è–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–æ–≤: –≤–æ–∑–º–æ–∂–Ω–µ–Ω 1 —Å–µ–∞–Ω—Å –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ (–º–∞—Å—Ç–µ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–º–∞).
            ‚ñ™Ô∏è–ü—Ä–∏ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ - –æ—Ç–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ–∞–Ω—Å–∞.
            ‚ñ™Ô∏è–ü—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö (–ª–∏–±–æ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏) - –æ—Ç–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ–∞–Ω—Å–∞.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–∞ –ø–ª–∞—Ç–µ–∂–∞, –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–µ–∞–Ω—Å–µ - –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç—ë–∂, –Ω–∞ —à–µ—Å—Ç–æ–º —Å–µ–∞–Ω—Å–µ - –≤—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ - 25.000‚ÇΩ.
            ‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ - 2.500‚ÇΩ.
            """
        default:
            infoText = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ."
        }
        infoLabel.text = infoText
        showInfoView()
    }
    
    func showInfoView() {
        infoView.isHidden = false
        view.layoutIfNeeded()
        
        UIView.animate(withDuration: 0.3) {
            self.infoView.transform = CGAffineTransform(translationX: 0, y: -self.infoView.frame.height)
        }
    }
    
    @objc func closeInfoView() {
        UIView.animate(withDuration: 0.3, animations: {
            self.infoView.transform = .identity
        }) { _ in
            self.infoView.isHidden = true
        }
    }
}
